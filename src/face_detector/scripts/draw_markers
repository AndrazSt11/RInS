#!/usr/bin/python3

import sys
import rospy
import dlib
import cv2
import numpy as np
import tf2_geometry_msgs
import tf2_ros
import math
#import matplotlib.pyplot as plt
from sensor_msgs.msg import Image
from geometry_msgs.msg import PointStamped, Vector3, Pose
from cv_bridge import CvBridge, CvBridgeError
from visualization_msgs.msg import Marker, MarkerArray
from std_msgs.msg import ColorRGBA 
from face_detector.msg import FaceDetected, Detected

class Markers: 
    def __init__(self):

        # Marker array object used for showing markers in Rviz
        self.marker_array = MarkerArray()
        self.marker_num = 1 

        # Publiser for the visualization markers
        self.markers_pub = rospy.Publisher('face_markers', MarkerArray, queue_size=1000) 

    def drawMarkers(self, pose, exists, index):
        if pose is not None:
            # Create a marker used for visualization 
            print("Position: ", pose)
            self.marker_num += 1
            marker = Marker()
            marker.header.stamp = rospy.Time(0)
            marker.header.frame_id = 'map'
            marker.pose = pose
            marker.type = Marker.CUBE
            marker.action = Marker.ADD
            marker.frame_locked = False
            marker.lifetime = rospy.Duration.from_sec(0)
            marker.id = self.marker_num 
            marker.scale = Vector3(0.1, 0.1, 0.1)
            marker.color = ColorRGBA(1, 1, 1, 1) 

            if (len(self.marker_array.markers) == 0 or exists == False): 
                # create a marker for new face
                print("nov")
                self.marker_array.markers.append(marker)
            else: 
                # update the existing marker 
                print("obstaja")
                self.marker_array.markers[index].pose = pose

            self.markers_pub.publish(self.marker_array)

def callback(data, args):
    marker = args

    # create a pose with given coordinates
    pose = Pose()
    pose.position.x = data.face_x
    pose.position.y = data.face_y
    pose.position.z = data.face_z 
    
    exists = data.exists
    index = data.index 

    print(exists, index)

    marker.drawMarkers(pose, exists, index)

def main(): 
    marker = Markers()
    rospy.init_node('face_detection_tester', anonymous=True)
    rospy.Subscriber('detection', Detected, callback, (marker));
    rospy.spin()

if __name__ == '__main__':
    main()